// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreOrganizer.Data;

namespace StoreOrganizer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200503084112_CreateTables")]
    partial class CreateTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreOrganizer.Data.Models.DepartmentDataModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreDataModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StoreDataModelId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StoreOrganizer.Data.Models.EmployeeDataModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentDataModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentDataModelId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("StoreOrganizer.Data.Models.GoodDataModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreDataModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StoreDataModelId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("StoreOrganizer.Data.Models.StoreDataModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("StoreOrganizer.Data.Models.DepartmentDataModel", b =>
                {
                    b.HasOne("StoreOrganizer.Data.Models.StoreDataModel", null)
                        .WithMany("Departments")
                        .HasForeignKey("StoreDataModelId");
                });

            modelBuilder.Entity("StoreOrganizer.Data.Models.EmployeeDataModel", b =>
                {
                    b.HasOne("StoreOrganizer.Data.Models.DepartmentDataModel", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentDataModelId");
                });

            modelBuilder.Entity("StoreOrganizer.Data.Models.GoodDataModel", b =>
                {
                    b.HasOne("StoreOrganizer.Data.Models.StoreDataModel", null)
                        .WithMany("Goods")
                        .HasForeignKey("StoreDataModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
